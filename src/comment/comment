<!-- {/* 
            <div className="react-grid-item grid-item react-draggable cssTransforms react-resizable" style="width: 595px; height: 510px; position: absolute; transform: translate(186px, 30px);">
                <header className="window-header">
                    <div className="logo-container">
                        <div className="app-logo">
                            <span className="app-name">Widget Name</span>
                        </div>
                    </div>
                    <div className="actions-container">
                        <button className="settings-window window-button-style">
                            <svg className="window-controls-icon">
                                <use href="#window-settings"></use></svg></button>
                        <button className="close-window window-button-style">
                            <svg className="window-controls-icon">
                                <use href="#window-close"></use></svg></button></div></header>
                <div data-highcharts-chart="0" style={{ width: "100%", height: "100%", overflow: "hidden" }}>
                    <div id="highcharts-hfb8dr1-0" dir="ltr" className="highcharts-container "
                        style={{ position: "relative", overflow: 'hidden', width: '595px', height: "510px", textAlign: 'left', lineHeight: "normal", zIndex: "0", userSelect: 'none' }}>
                        <svg version="1.1" className="highcharts-root" style={{font-family:"&quot", Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Arial, Helvetica, sans-serif;font-size:12px;}} xmlns="http://www.w3.org/2000/svg" width="595" height="510" viewBox="0 0 595 510">
                            <desc>Created with Highcharts 8.2.2</desc>
                            <defs><clipPath id="highcharts-hfb8dr1-1-">
                                <rect x="0" y="0" width="518" height="379" fill="none"></rect></clipPath>
                            </defs><rect fill="#ffffff" className="highcharts-background" x="0" y="0" width="595" height="510" rx="0" ry="0"></rect>
                            <rect fill="none" className="highcharts-plot-background" x="67" y="53" width="518" height="379">
                            </rect><g className="highcharts-grid highcharts-xaxis-grid" data-z-index="1">
                                <path fill="none" data-z-index="1" className="highcharts-grid-line" d="M 141.5 53 L 141.5 432" opacity="1"></path>
                                <path fill="none" data-z-index="1" className="highcharts-grid-line" d="M 261.5 53 L 261.5 432" opacity="1"></path>
                                <path fill="none" data-z-index="1" className="highcharts-grid-line" d="M 381.5 53 L 381.5 432" opacity="1"></path>
                                <path fill="none" data-z-index="1" className="highcharts-grid-line" d="M 501.5 53 L 501.5 432" opacity="1"></path>
                            </g><g className="highcharts-grid highcharts-yaxis-grid" data-z-index="1">
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 52.5 L 585 52.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 432.5 L 585 432.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 378.5 L 585 378.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 324.5 L 585 324.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 270.5 L 585 270.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 215.5 L 585 215.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 161.5 L 585 161.5" opacity="1"></path>
                                <path fill="none" stroke="#e6e6e6" stroke-width="1" data-z-index="1" className="highcharts-grid-line" d="M 67 107.5 L 585 107.5" opacity="1"></path>
                            </g><rect fill="none" className="highcharts-plot-border" data-z-index="1" x="67" y="53" width="518" height="379"></rect>
                            <g className="highcharts-axis highcharts-xaxis" data-z-index="2">
                                <path fill="none" className="highcharts-tick" stroke="#ccd6eb" stroke-width="1" d="M 141.5 432 L 141.5 442" opacity="1"></path>
                                <path fill="none" className="highcharts-tick" stroke="#ccd6eb" stroke-width="1" d="M 261.5 432 L 261.5 442" opacity="1"></path>
                                <path fill="none" className="highcharts-tick" stroke="#ccd6eb" stroke-width="1" d="M 381.5 432 L 381.5 442" opacity="1"></path>
                                <path fill="none" className="highcharts-tick" stroke="#ccd6eb" stroke-width="1" d="M 501.5 432 L 501.5 442" opacity="1"></path>
                                <path fill="none" className="highcharts-axis-line" stroke="#ccd6eb" stroke-width="1" data-z-index="7" d="M 67 432.5 L 585 432.5"></path>
                            </g><g className="highcharts-axis highcharts-yaxis" data-z-index="2">
                                <text x="26.04443359375" data-z-index="7" text-anchor="middle" transform="translate(0,0) rotate(270 26.04443359375 242.5)" className="highcharts-axis-title" style="color:#666666;fill:#666666;" y="242.5">
                                    <tspan>Values</tspan></text><path fill="none" className="highcharts-axis-line" data-z-index="7" d="M 67 53 L 67 432"></path>
                            </g><g className="highcharts-series-group" data-z-index="3">
                                <g className="highcharts-series highcharts-series-0 highcharts-line-series highcharts-color-0" data-z-index="0.1" opacity="1" transform="translate(67,53) scale(1 1)" clip-path="url(#highcharts-hfb8dr1-1-)">
                                    <path fill="none" d="M 5.078431372549 38.98285714285714 L 10.260504201681 63.076428571428494 L 15.442577030812 63.34714285714284 L 20.624649859944 59.28642857142859 L 25.806722689076 73.63428571428568 L 41.352941176471 106.93214285714282 L 46.535014005602 108.8271428571428 L 51.717086834734 155.38999999999996 L 56.899159663866 131.02571428571426 L 62.081232492997 104.7664285714286 L 77.627450980392 142.93714285714287 L 82.809523809524 159.17999999999995 L 87.991596638655 151.87071428571426 L 93.173669467787 139.4178571428571 L 98.355742296919 153.76571428571427 L 113.90196078431 242.56 L 119.08403361345 210.07428571428574 L 124.26610644258 227.67071428571427 L 129.44817927171 262.5928571428571 L 134.63025210084 274.23357142857145 L 150.17647058824 270.17285714285714 L 155.35854341737 304.8242857142857 L 160.5406162465 302.3878571428571 L 165.72268907563 306.4485714285714 L 170.90476190476 276.1285714285714 L 186.45098039216 223.3392857142857 L 191.63305322129 247.16214285714287 L 196.81512605042 270.985 L 201.99719887955 255.5542857142857 L 207.17927170868 273.1507142857143 L 222.72549019608 269.09 L 227.90756302521 295.89071428571424 L 233.08963585434 275.04571428571427 L 238.27170868347 269.90214285714285 L 243.45378151261 276.9407142857143 L 259 293.4542857142857 L 264.18207282913 263.405 L 269.36414565826 245.26714285714286 L 274.54621848739 220.36142857142858 L 279.72829131653 233.6264285714286 L 295.27450980392 236.06285714285715 L 300.45658263305 220.36142857142858 L 305.63865546218 250.14 L 310.82072829132 266.3828571428571 L 316.00280112045 269.90214285714285 L 331.54901960784 278.8357142857143 L 336.73109243697 283.1671428571429 L 341.91316526611 301.305 L 347.09523809524 276.67 L 352.27731092437 300.7635714285714 L 367.82352941176 308.885 L 373.0056022409 302.1171428571429 L 378.18767507003 315.92357142857145 L 383.36974789916 338.3928571428571 L 388.55182072829 330.27142857142854 L 404.09803921569 290.2057142857143 L 409.28011204482 298.59785714285715 L 414.46218487395 282.355 L 424.82633053221 291.2885714285714 L 440.37254901961 305.90714285714284 L 445.55462184874 292.1007142857143 L 450.73669467787 278.8357142857143 L 455.918767507 296.1614285714286 L 461.10084033613 286.145 L 476.64705882353 263.94642857142856 L 481.82913165266 262.86357142857145 L 487.01120448179 269.90214285714285 L 492.19327731092 282.355 L 497.37535014006 269.6314285714286 L 512.92156862745 283.1671428571429" className="highcharts-graph" data-z-index="1" stroke="#7cb5ec" stroke-width="2" stroke-linejoin="round" stroke-linecap="round">
                                    </path>
                                    <path fill="none" d="M 5.078431372549 38.98285714285714 L 10.260504201681 63.076428571428494 L 15.442577030812 63.34714285714284 L 20.624649859944 59.28642857142859 L 25.806722689076 73.63428571428568 L 41.352941176471 106.93214285714282 L 46.535014005602 108.8271428571428 L 51.717086834734 155.38999999999996 L 56.899159663866 131.02571428571426 L 62.081232492997 104.7664285714286 L 77.627450980392 142.93714285714287 L 82.809523809524 159.17999999999995 L 87.991596638655 151.87071428571426 L 93.173669467787 139.4178571428571 L 98.355742296919 153.76571428571427 L 113.90196078431 242.56 L 119.08403361345 210.07428571428574 L 124.26610644258 227.67071428571427 L 129.44817927171 262.5928571428571 L 134.63025210084 274.23357142857145 L 150.17647058824 270.17285714285714 L 155.35854341737 304.8242857142857 L 160.5406162465 302.3878571428571 L 165.72268907563 306.4485714285714 L 170.90476190476 276.1285714285714 L 186.45098039216 223.3392857142857 L 191.63305322129 247.16214285714287 L 196.81512605042 270.985 L 201.99719887955 255.5542857142857 L 207.17927170868 273.1507142857143 L 222.72549019608 269.09 L 227.90756302521 295.89071428571424 L 233.08963585434 275.04571428571427 L 238.27170868347 269.90214285714285 L 243.45378151261 276.9407142857143 L 259 293.4542857142857 L 264.18207282913 263.405 L 269.36414565826 245.26714285714286 L 274.54621848739 220.36142857142858 L 279.72829131653 233.6264285714286 L 295.27450980392 236.06285714285715 L 300.45658263305 220.36142857142858 L 305.63865546218 250.14 L 310.82072829132 266.3828571428571 L 316.00280112045 269.90214285714285 L 331.54901960784 278.8357142857143 L 336.73109243697 283.1671428571429 L 341.91316526611 301.305 L 347.09523809524 276.67 L 352.27731092437 300.7635714285714 L 367.82352941176 308.885 L 373.0056022409 302.1171428571429 L 378.18767507003 315.92357142857145 L 383.36974789916 338.3928571428571 L 388.55182072829 330.27142857142854 L 404.09803921569 290.2057142857143 L 409.28011204482 298.59785714285715 L 414.46218487395 282.355 L 424.82633053221 291.2885714285714 L 440.37254901961 305.90714285714284 L 445.55462184874 292.1007142857143 L 450.73669467787 278.8357142857143 L 455.918767507 296.1614285714286 L 461.10084033613 286.145 L 476.64705882353 263.94642857142856 L 481.82913165266 262.86357142857145 L 487.01120448179 269.90214285714285 L 492.19327731092 282.355 L 497.37535014006 269.6314285714286 L 512.92156862745 283.1671428571429" visibility="visible" data-z-index="2" className="highcharts-tracker-line" stroke-linecap="round" stroke-linejoin="round" stroke="rgba(192,192,192,0.0001)" stroke-width="22"></path></g>
                                <g className="highcharts-markers highcharts-series-0 highcharts-line-series highcharts-color-0 highcharts-tracker" data-z-index="0.1" opacity="1" transform="translate(67,53) scale(1 1)">
                                    <path fill="#7cb5ec" d="M 129 268.5928571428571 A 6 6 0 1 1 129.005999999 268.59285414285733 Z" stroke="#ffffff" stroke-width="1" opacity="1" visibility="hidden"></path>
                                    <path fill="#7cb5ec" d="M 129 262.5928571428571 A 0 0 0 1 1 129 262.5928571428571 Z" className="highcharts-halo highcharts-color-0" data-z-index="-1" fill-opacity="0.25" visibility="hidden"></path></g>
                            </g><text x="298" text-anchor="middle" className="highcharts-title" data-z-index="4" style="color:#333333;font-size:18px;fill:#333333;" y="24"><tspan>AAPL Stock Price</tspan>
                            </text><text x="298" text-anchor="middle" className="highcharts-subtitle" data-z-index="4" style="color:#666666;fill:#666666;" y="52"></text>
                            <text x="10" text-anchor="start" className="highcharts-caption" data-z-index="4" style="color:#666666;fill:#666666;" y="507"></text>
                            <g className="highcharts-legend" data-z-index="7" transform="translate(262,466)"><rect fill="none" className="highcharts-legend-box" rx="0" ry="0" x="0" y="0" width="70" height="29" visibility="visible"></rect>
                                <g data-z-index="1"><g><g className="highcharts-legend-item highcharts-line-series highcharts-color-0 highcharts-series-0" data-z-index="1" transform="translate(8,3)">
                                    <path fill="none" d="M 0 11 L 16 11" className="highcharts-graph" stroke="#7cb5ec" stroke-width="2"></path>
                                    <path fill="#7cb5ec" d="M 8 15 A 4 4 0 1 1 8.003999999333336 14.999998000000167 Z" className="highcharts-point" opacity="1"></path>
                                    <text x="21" style="color:#333333;cursor:pointer;font-size:12px;font-weight:bold;fill:#333333;" text-anchor="start" data-z-index="2" y="15"><tspan>AAPL</tspan>
                                    </text></g></g></g></g><g className="highcharts-axis-labels highcharts-xaxis-labels" data-z-index="7"><text x="142.13237887748" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="middle" transform="translate(0,0)" y="451" opacity="1">
                                        <tspan>1 222G</tspan></text><text x="262.08776844071" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="middle" transform="translate(0,0)" y="451" opacity="1"><tspan>1 224G</tspan></text>
                                <text x="382.04315800394" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="middle" transform="translate(0,0)" y="451" opacity="1"><tspan>1 226G</tspan></text>
                                <text x="501.99854756718" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="middle" transform="translate(0,0)" y="451" opacity="1"><tspan>1 228G</tspan></text>
                            </g><g className="highcharts-axis-labels highcharts-yaxis-labels" data-z-index="7">
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="57" opacity="1">24</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="436" opacity="1">10</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="382" opacity="1">12</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="328" opacity="1">14</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="274" opacity="1">16</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="219" opacity="1">18</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="165" opacity="1">20</text>
                                <text x="52" style="color:#666666;cursor:default;font-size:11px;fill:#666666;" text-anchor="end" transform="translate(0,0)" y="111" opacity="1">22</text>
                            </g><text x="585" className="highcharts-credits" text-anchor="end" data-z-index="8" style="cursor:pointer;color:#999999;font-size:9px;fill:#999999;" y="505">Highcharts.com</text>
                            <g className="highcharts-label highcharts-tooltip highcharts-color-0" style="white-space:nowrap;pointer-events:none;" data-z-index="8" transform="translate(145,-9999)" opacity="0" visibility="hidden">
                                <path fill="none" className="highcharts-label-box highcharts-tooltip-box highcharts-shadow" d="M 3.5 0.5 L 99.5 0.5 C 102.5 0.5 102.5 0.5 102.5 3.5 L 102.5 44.5 C 102.5 47.5 102.5 47.5 99.5 47.5 L 56.5 47.5 L 50.5 53.5 L 44.5 47.5 L 3.5 47.5 C 0.5 47.5 0.5 47.5 0.5 44.5 L 0.5 3.5 C 0.5 0.5 0.5 0.5 3.5 0.5" stroke="#000000" stroke-opacity="0.049999999999999996" stroke-width="5" transform="translate(1, 1)"></path>
                                <path fill="none" className="highcharts-label-box highcharts-tooltip-box highcharts-shadow" d="M 3.5 0.5 L 99.5 0.5 C 102.5 0.5 102.5 0.5 102.5 3.5 L 102.5 44.5 C 102.5 47.5 102.5 47.5 99.5 47.5 L 56.5 47.5 L 50.5 53.5 L 44.5 47.5 L 3.5 47.5 C 0.5 47.5 0.5 47.5 0.5 44.5 L 0.5 3.5 C 0.5 0.5 0.5 0.5 3.5 0.5" stroke="#000000" stroke-opacity="0.09999999999999999" stroke-width="3" transform="translate(1, 1)"></path>
                                <path fill="none" className="highcharts-label-box highcharts-tooltip-box highcharts-shadow" d="M 3.5 0.5 L 99.5 0.5 C 102.5 0.5 102.5 0.5 102.5 3.5 L 102.5 44.5 C 102.5 47.5 102.5 47.5 99.5 47.5 L 56.5 47.5 L 50.5 53.5 L 44.5 47.5 L 3.5 47.5 C 0.5 47.5 0.5 47.5 0.5 44.5 L 0.5 3.5 C 0.5 0.5 0.5 0.5 3.5 0.5" stroke="#000000" stroke-opacity="0.15" stroke-width="1" transform="translate(1, 1)"></path>
                                <path fill="rgba(247,247,247,0.85)" className="highcharts-label-box highcharts-tooltip-box" d="M 3.5 0.5 L 99.5 0.5 C 102.5 0.5 102.5 0.5 102.5 3.5 L 102.5 44.5 C 102.5 47.5 102.5 47.5 99.5 47.5 L 56.5 47.5 L 50.5 53.5 L 44.5 47.5 L 3.5 47.5 C 0.5 47.5 0.5 47.5 0.5 44.5 L 0.5 3.5 C 0.5 0.5 0.5 0.5 3.5 0.5" stroke="#7cb5ec" stroke-width="1"></path>
                                <text x="8" data-z-index="1" y="20" style="color:#333333;cursor:default;font-size:12px;fill:#333333;">
                                    <tspan style="font-size: 10px">1222905600000</tspan><tspan style="fill:#7cb5ec" x="8" dy="15">●</tspan><tspan dx="0"> AAPL: </tspan>
                                    <tspan style="font-weight:bold" dx="0">14.30</tspan></text></g></svg></div></div><span className="react-resizable-handle react-resizable-handle-se"></span></div> */} -->














<!-- 




                                    // import * as React from 'react';
                                    // import Paper from '@mui/material/Paper';
                                    // import { ArgumentAxis, ValueAxis, BarSeries, Chart } from '@devexpress/dx-react-chart-material-ui';
                                    // import { ValueScale } from '@devexpress/dx-react-chart';
                                    
                                    
                                    
                                    
                                    
                                    // interface IDataItem {
                                    // month: string,
                                    // sale: number,
                                    // total: number,
                                    // }
                                    
                                    // const chartData: IDataItem[] = [
                                    // { month: 'Jan', sale: 50, total: 987 },
                                    // { month: 'Feb', sale: 100, total: 3000 },
                                    // { month: 'March', sale: 30, total: 1100 },
                                    // { month: 'April', sale: 107, total: 7100 },
                                    // { month: 'May', sale: 95, total: 4300 },
                                    // { month: 'June', sale: 150, total: 6210 },
                                    // { month: 'July', sale: 212, total: 6500 },
                                    // { month: 'August', sale: 80, total: 4500 },
                                    // { month: 'September', sale: 120, total: 2000 },
                                    // { month: 'October', sale: 138, total: 3690 },
                                    // { month: 'November', sale: 60, total: 6840 },
                                    // { month: 'Decenber', sale: 160, total: 7500 },
                                    // ];
                                    
                                    // export default function App() {
                                    // return (
                                    // <Paper>
                                        // <Chart // data={chartData} //>
                                            //
                                            <ValueScale name="sale" />
                                            //
                                            <ValueScale name="total" />
                                    
                                            //
                                            <ArgumentAxis />
                                            //
                                            <ValueAxis scaleName="sale" showGrid={false} showLine={true} showTicks={true} />
                                            //
                                            <BarSeries // name="Units Sold" // valueField="sale" // argumentField="month" // scaleName="sale" // />
                                    
                                            //
                                        </Chart>
                                        // </Paper>
                                    // );
                                    // } -->





                                    <!-- 

                                            // interface IDataItem {
    //     month: string,
    //     sale: number,
    //     total: number,
    // }

    // const chartData: IDataItem[] = [
    //     { month: 'Jan', sale: 50, total: 987 },
    //     { month: 'Feb', sale: 100, total: 3000 },
    //     { month: 'March', sale: 30, total: 1100 },
    //     { month: 'April', sale: 107, total: 7100 },
    //     { month: 'May', sale: 95, total: 4300 },
    //     { month: 'June', sale: 150, total: 6210 },
    //     { month: 'July', sale: 212, total: 6500 },
    //     { month: 'August', sale: 80, total: 4500 },
    //     { month: 'September', sale: 120, total: 2000 },
    //     { month: 'October', sale: 138, total: 3690 },
    //     { month: 'November', sale: 60, total: 6840 },
    //     { month: 'Decenber', sale: 160, total: 7500 },
    // ];








                {/* <Paper>
                <Chart
                    data={chartData}
                >
                    <ValueScale name="sale" />
                    <ValueScale name="total" />

                    <ArgumentAxis />
                    <ValueAxis scaleName="sale" showGrid={false} showLine={true} showTicks={true} />
                    <BarSeries
                        name="Units Sold"
                        valueField="sale"
                        argumentField="month"
                        scaleName="sale"
                    />

                </Chart>
            </Paper> */}
            {/* // </div > */}
                                     -->


                                        import React, { useState } from 'react';
import { Responsive, WidthProvider } from 'react-grid-layout';
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid } from 'recharts';

const ResponsiveReactGridLayout = WidthProvider(Responsive);
type Props = {

}

const View: React.FC<Props> = ({ }: Props) => {
    const layouts = {
        lg: [
            { i: 'a', w: 2, h: 3, x: 0, y: 0, },
            { i: 'b', w: 2, h: 3, x: 2, y: 0, },
            { i: 'c', w: 2, h: 3, x: 4, y: 0, }
        ]
    };
    const charts = {
        cht: [
            { i: 'a', w: 2, h: 3, x: 0, y: 0, },
            { i: 'b', w: 2, h: 3, x: 0, y: 0, },
            { i: 'c', w: 2, h: 3, x: 0, y: 0, },

        ]
    }

    const getId = () => {
        return Math.random().toString();
    };

    const [layout, setLayout] = useState([{ x: 0, y: 0, w: 3, h: 3, i: getId() }])
    const [chart, setChart] = useState([
        {name: 'Yanvar', uv: 4000, pv: 2400, amt: 2400 , i: getId()},
        {name: 'Fevral', uv: 3000, pv: 1398, amt: 2210 , i: getId()},
        {name: 'Mart', uv: 2000, pv: 9800, amt: 2290 , i: getId()},
        {name: 'Aprel', uv: 2780, pv: 3908, amt: 2000 , i: getId()},
        {name: 'May', uv: 1890, pv: 4800, amt: 2181 , i: getId()},
        {name: 'Iyun',   uv: 2390, pv: 3800, amt: 2500 , i: getId()},
        {name: 'Iyul', uv: 3490, pv: 4300, amt: 2100 , i: getId()},
    ])

    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
        console.log("click")
        const newItems = { x: 0, y: 0, w: 3, h: 3, i: getId() };
        if (layout.some(item => item.x === 0 && item.y)) {
            setLayout(
                layout.map(item => {
                    if (item.x === 0) {
                        return { ...item, y: item.y++ };
                    }

                    return item;
                }).concat([newItems])
            )
        } else {
            setLayout(layout.concat([newItems]));
        }
    }
    const chartClick = (e: React.MouseEvent<HTMLButtonElement>) => {
        console.log("click")
        const newChart = [
            {name: 'Yanvar', uv: 4000, pv: 2400, amt: 2400, i: getId() },
            {name: 'Fevral', uv: 3000, pv: 1398, amt: 2210, i: getId() },
            {name: 'Mart', uv: 2000, pv: 9800, amt: 2290, i: getId() },
            {name: 'Aprel', uv: 2780, pv: 3908, amt: 2000, i: getId() },
            {name: 'May', uv: 1890, pv: 4800, amt: 2181, i: getId() },
            {name: 'Iyun',   uv: 2390, pv: 3800, amt: 2500, i: getId() },
            {name: 'Iyul', uv: 3490, pv: 4300, amt: 2100, i: getId() },
        ];
        if (chart.some(item => item.uv === 0 && item.pv)) {
            setChart(chart.map(item => {
                if (item.amt === 0) {
                    return { ...item, pv: item.pv++ }
                }
                return item
            }).concat(newChart)
            )
        } else {
            setChart(chart.concat(newChart))
        }


    }

    const defaultProps = {
        isDraggable: true,
        isResizable: true,
        items: 5,
        rowHeight: 30,
        preventCollision: false,
        cols: 12
    };


    return (
        <>
            <div>
                <button onClick={handleClick}>
                    Add item
                </button>
                <button onClick={chartClick}>Add Chart</button>
            </div>
            <ResponsiveReactGridLayout
                {...defaultProps}
                className="test-layout"
                layouts={layouts}
                cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}
                rowHeight={40}>
                {layout.map(item => (
                    <div key={item.i} data-grid={item} style={{ overflow: 'hidden' }}>
                        <input type="text" placeholder='Title' style={{ width: '100%', background: 'white', border: 'unset' }} />
                        <div>hello</div>
                    </div>
                ))}

                <div key='a'>
                    {chart.map(item => (
                        // {/* <span className="react-resizable-handle" />  */}
                        <ResponsiveContainer>
                            <BarChart key={item.i}  data-grid={item} width={600} height={600}
                                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                                <XAxis dataKey="name" />
                                <YAxis />
                                <CartesianGrid strokeDasharray="3 3" />
                                <Bar dataKey="pv" fill="#8884d8" />
                                <Bar dataKey="uv" fill="#82ca9d" />
                            </BarChart>
                        </ResponsiveContainer>
                    ))}


                </div>
            </ResponsiveReactGridLayout>
        </>
    )
}

export default View;





                                     <!-- 
                                        /*import React, { useState } from "react";
import { WidthProvider, Responsive } from "react-grid-layout";
import _ from "lodash";
import Chart from './DropControlsHere/Panels/chart'
import Table from './DropControlsHere/Panels/table'
import Item from "antd/lib/list/Item";
// import Item from './DropControlsHere/item/index'

const ResponsiveReactGridLayout = WidthProvider(Responsive);

type Props = {

}
type ChartType = {
    name: string
    item: string,
    i: string,
    x: number,
    y: number,
    w: number,
    h: number,
    minW: number,
    minH: number
}

const View: React.FC<Props> = ({ }: Props) => {



     const [charts, setCharts] = useState({

        

         items: _.map((i: ChartType) => {
             return {
                 name: "",
                 item: "",
                 i: "",
                 x: 0,
                 y: 0,
                 w: 0,
                 h: 0,
                 minW: 0,
                 minH: 0
             };
         }),
         newCounter: 0
     });



     console.log(charts);
    return (
         <div>
             <Chart setCharts={setCharts} charts={charts} />
             <Table setCharts={setCharts} charts={charts} />
             <ResponsiveReactGridLayout
                 autoSize
                  layouts={charts.items}
                 useCSSTransforms={false}
                 {...charts}
             >
                 {_.map(charts.items, (el: any) => {
                     const removeStyle = {
                         position: "absolute",
                         right: "2px",
                         top: "0",
                         cursor: "pointer"
                     };

                     const i = el.i;
                     return (
                         <div className="box " key={i} data-grid={el}>
                             <div className="chart">{el.item}</div>
                             <span
                                 className="remove"
                             >
                                 x
                             </span>
                         </div>
                     );
                 })}
             </ResponsiveReactGridLayout>
         </div>
        
    );
}

export default View;*/

                                      -->